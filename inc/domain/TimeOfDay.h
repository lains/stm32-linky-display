#pragma once

#include "TIC/DatasetView.h" // For TIC::Horodate

class TimeOfDay {
public:
/* Methods */
    TimeOfDay();

    /**
     * @brief Construct from hour, minute, seconds and optionally milliseconds
    */
    TimeOfDay(unsigned int hour, unsigned int minute, unsigned int second, unsigned int millisecond = static_cast<unsigned int>(-1));

    /**
     * @brief Construct from a TIC::Horodate
    */
    TimeOfDay(const TIC::Horodate& from);

    /**
     * @brief Make the current time of day go forward a given seconds in time
     * 
     * @param seconds The seconds to add
     * @return 0 if the result is in the same day as the original value, otherwise, the number of days forward (the current instance will be updated up to hours, but days will remain unchanged in any case)
     */
    unsigned int addSeconds(unsigned int seconds);

    /**
     * @brief Returns the equivalent seconds from midnight
     * 
     * For example a time of day containing 00:03:00 will return 3*60=180
     * 
     * @note This will not return milliseconds or date information, that should be extracted from other attributes
     * @warning If this timestamp is invalid, we will return -1
     */
    unsigned int toSeconds() const;

private:
    /**
     * @brief Comparison of two instances
     * 
     * @param other The other TimeOfDay to compare with
     * @return int -1 is we are earlier than @other, 1 if we are later than @other and 0 if both are equal
     * 
     * @note If one timestamp is invalid, it is considered as the origin of time, thus earlier (-1) than any valid timestamps
     *       If both timestamps are invalid, they are considered equal (0)
     * @note We only compare milliseconds if available on both objects
     */
    int timeStampCmp(const TimeOfDay& other) const;

public:
    bool operator==(const TimeOfDay& other) const;
    bool operator!=(const TimeOfDay& other) const;
    bool operator<(const TimeOfDay& other) const;
    bool operator>(const TimeOfDay& other) const;
    bool operator<=(const TimeOfDay& other) const;
    bool operator>=(const TimeOfDay& other) const;

#ifdef __TIC_LIB_USE_STD_STRING__
    std::string toString() const;
#endif

public:
/* Attributes */
    bool isValid; /*!< Does this instance contain a valid timestamp? */
    bool estimatedTime; /*!< The timestamp was generated by a precise clock */
    unsigned int hour; /*!< The hour */
    unsigned int minute; /*!< The minute */
    unsigned int second; /*!< The second */
    unsigned int millisecond; /*!< The milliseconds */
    bool knownMilliseconds; /*!< Is the millisecond attribute valid? */
};
